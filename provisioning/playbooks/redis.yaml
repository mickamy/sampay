- name: Install Redis on Amazon Linux 2023
  hosts: all
  become: true
  vars:
    redis_install_dir: "/usr/local/bin/redis-server"
    redis_data_dir: "/var/lib/redis"
    redis_service_file: "/etc/systemd/system/redis.service"

  tasks:
    - name: Check if Redis is installed and its version
      ansible.builtin.command: "{{ redis_install_dir }} --version"
      register: redis_version_check
      ignore_errors: true
      changed_when: false

    - name: Install Redis if not installed or version mismatch
      block:
        - name: Install required dependencies
          ansible.builtin.dnf:
            name:
              - gcc
              - make
              - tar
              - wget
            state: present

        - name: Download Redis source code
          ansible.builtin.get_url:
            url: https://download.redis.io/releases/redis-{{ redis_version }}.tar.gz
            dest: /tmp/redis-{{ redis_version }}.tar.gz
            mode: '0644'

        - name: Set permissions for Redis source
          ansible.builtin.file:
            path: /tmp/redis-{{ redis_version }}.tar.gz
            mode: '0755'

        - name: Unzip Redis source
          ansible.builtin.unarchive:
            src: /tmp/redis-{{ redis_version }}.tar.gz
            dest: /tmp
            remote_src: true

        - name: Build Redis
          community.general.make:
            chdir: /tmp/redis-{{ redis_version }}

        - name: Install Redis
          community.general.make:
            chdir: /tmp/redis-{{ redis_version }}
            target: install

        - name: Copy Redis configuration file
          ansible.builtin.copy:
            src: /tmp/redis-{{ redis_version }}/redis.conf
            dest: /etc/redis.conf
            owner: root
            group: root
            mode: '0644'

        - name: Remove Redis archive and source directory
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - /tmp/redis-{{ redis_version }}.tar.gz
            - /tmp/redis-{{ redis_version }}

      when: redis_version_check.failed or
        "Redis server v={{ redis_version }}" not in redis_version_check.stdout

    - name: Create Redis group and user
      block:
        - name: Create Redis group
          ansible.builtin.group:
            name: redis
            system: true

        - name: Create Redis user
          ansible.builtin.user:
            name: redis
            group: redis
            system: true
            create_home: false

    - name: Create redis data directory
      ansible.builtin.file:
        path: "{{ redis_data_dir }}"
        state: directory
        owner: redis
        group: redis
        mode: '0750'

    - name: Create Redis systemd service
      ansible.builtin.copy:
        dest: "{{ redis_service_file }}"
        content: |
          [Unit]
          Description=Redis In-Memory Data Store
          After=network.target

          [Service]
          ExecStart=/usr/local/bin/redis-server /etc/redis.conf
          ExecStop=/usr/local/bin/redis-cli shutdown
          Restart=always
          User=redis
          Group=redis

          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: '0644'

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Enable and start Redis service
      ansible.builtin.systemd:
        name: redis
        state: started
        enabled: true

    - name: Verify Redis is running
      ansible.builtin.command:
        cmd: redis-cli ping
      register: redis_status
      changed_when: false
      ignore_errors: true

    - name: Print Redis status
      ansible.builtin.debug:
        msg: "Redis status: {{ redis_status.stdout if not redis_status.failed else 'Not running' }}"
