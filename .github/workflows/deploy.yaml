name: Deploy Application

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy target environment'
        required: true
        default: 'stg'
        type: choice
        options:
          - stg
          - prod
  push:
    branches:
      - "main"

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      AWS_REGION: ap-northeast-1
      ENV: ${{ github.event.inputs.environment || 'stg' }}

    steps:
      - uses: actions/checkout@v4

      - name: Set dynamic environment variables
        id: set-env
        run: |
          if [ "${{ env.ENV }}" = "prod" ]; then
            echo "DOMAIN=sampay.link" >> $GITHUB_ENV
            echo "SSH_PORT=${{ secrets.SSH_PORT_PROD }}" >> $GITHUB_ENV
            echo "SECURITY_GROUP_ID=${{ secrets.SECURITY_GROUP_ID_PROD }}" >> $GITHUB_ENV
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_ADMIN_PASSWORD_PROD }}" >> $GITHUB_ENV
            echo "KVS_PASSWORD=${{ secrets.KVS_PASSWORD_PROD }}" >> $GITHUB_ENV
            echo "EC2_SSH_KEY=${{ secrets.EC2_SSH_KEY_PROD }}" >> $GITHUB_ENV
          else
            echo "DOMAIN=stg.sampay.link" >> $GITHUB_ENV
            echo "SSH_PORT=${{ secrets.SSH_PORT_STG }}" >> $GITHUB_ENV
            echo "SECURITY_GROUP_ID=${{ secrets.SECURITY_GROUP_ID_STG }}" >> $GITHUB_ENV
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_ADMIN_PASSWORD_STG }}" >> $GITHUB_ENV
            echo "KVS_PASSWORD=${{ secrets.KVS_PASSWORD_STG }}" >> $GITHUB_ENV
            echo "EC2_SSH_KEY=${{ secrets.EC2_SSH_KEY_STG }}" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::590183691452:role/GitHubActionsRole-590183691452
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Allow IP in Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
          --group-id ${{ env.SECURITY_GROUP_ID }} \
          --protocol tcp \
          --port ${{ env.SSH_PORT }} \
          --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Set up SSH
        run: |
          echo "${{ env.EC2_SSH_KEY }}" | base64 --decode > key.pem
          chmod 600 key.pem

      - name: Add domain to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ env.SSH_PORT }} -H ${{ env.DOMAIN }} >> ~/.ssh/known_hosts

      - name: Set ansible vault password
        run: |
          mkdir -p provisioning/secrets
          echo "${{ secrets.ANSIBLE_VAULT_PASS }}" > ./provisioning/secrets/ansible_vault_pass

      - name: Execute ansible playbook
        run: |
          cd ./provisioning
      
          export ANSIBLE_SSH_KEY="${GITHUB_WORKSPACE}/key.pem"
          export ANSIBLE_SSH_PORT="${SSH_PORT}"
          export AWS_REGION="${AWS_REGION}"
          export CERTBOT_EMAIL="${CERTBOT_EMAIL}"
          export POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
          export KVS_PASSWORD="${KVS_PASSWORD}"
      
          if [ "${ENV}" = "stg" ]; then
          export BASIC_USER="${BASIC_USER}"
          export BASIC_PASSWORD="${BASIC_PASSWORD}"
          fi
      
          ansible-playbook -i ./inventory/web.yaml playbook.yaml \
          --vault-password-file ./secrets/ansible_vault_pass --limit "${ENV}"
        env:
          SSH_PORT: ${{ env.SSH_PORT }}
          AWS_REGION: ${{ env.AWS_REGION }}
          CERTBOT_EMAIL: ${{ secrets.CERTBOT_EMAIL }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          KVS_PASSWORD: ${{ env.KVS_PASSWORD }}
          BASIC_USER: ${{ secrets.BASIC_USER }}
          BASIC_PASSWORD: ${{ secrets.BASIC_PASSWORD }}
          ENV: ${{ env.ENV }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./backend/go.mod
          cache-dependency-path: ./backend/go.sum

      - name: Set directory suffix
        run: |
          echo "DIR_SUFFIX=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Build backend binaries
        run: cd backend && make build

      - name: Ensure app directory exists
        run: |
          ssh -p ${{ env.SSH_PORT }} -i key.pem ec2-user@${{ env.DOMAIN }} -o StrictHostKeyChecking=no '
            mkdir -p /home/ec2-user/sampay
          '

      - name: Copy binaries to EC2 (build & db)
        run: |
          scp -r -i key.pem -P ${{ env.SSH_PORT }} -o StrictHostKeyChecking=no \
            ./backend/build ./backend/db ec2-user@${{ env.DOMAIN }}:/home/ec2-user/sampay/backend-${{ env.DIR_SUFFIX }}/

      - name: Deploy backend application
        run: |
          cat "${GITHUB_WORKSPACE}/backend/bin/deploy.sh" |
          ssh -p ${{ env.SSH_PORT }} -i key.pem ec2-user@${{ env.DOMAIN }} -o StrictHostKeyChecking=no '
            export DIR_SUFFIX="${{ env.DIR_SUFFIX }}";
            export NGINX_CONF="/etc/nginx/conf.d/${{ env.DOMAIN }}.conf";
            export DOMAIN="${{ env.DOMAIN }}";
            bash -s
          '

      - name: Copy frontend files to EC2
        run: |
          scp -C -r -i key.pem -P ${{ env.SSH_PORT }} -o StrictHostKeyChecking=no \
            ./frontend ec2-user@${{ env.DOMAIN }}:/home/ec2-user/sampay/frontend-${{ env.DIR_SUFFIX }}

      - name: Deploy frontend application
        run: |
          cat "${GITHUB_WORKSPACE}/frontend/bin/deploy.sh" |
          ssh -p ${{ env.SSH_PORT }} -i key.pem ec2-user@${{ env.DOMAIN }} -o StrictHostKeyChecking=no '
            export DIR_SUFFIX="${{ env.DIR_SUFFIX }}";
            export NGINX_CONF="/etc/nginx/conf.d/${{ env.DOMAIN }}.conf";
            export DOMAIN="${{ env.DOMAIN }}";
            bash -s
          '

      - name: Revoke IP from Security Group
        if: ${{ always() }}
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ env.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port ${{ env.SSH_PORT }} \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
