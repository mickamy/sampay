// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/session.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "mickamy.com/sampay/gen/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SessionServiceName is the fully-qualified name of the SessionService service.
	SessionServiceName = "auth.v1.SessionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SessionServiceSignInProcedure is the fully-qualified name of the SessionService's SignIn RPC.
	SessionServiceSignInProcedure = "/auth.v1.SessionService/SignIn"
	// SessionServiceRefreshProcedure is the fully-qualified name of the SessionService's Refresh RPC.
	SessionServiceRefreshProcedure = "/auth.v1.SessionService/Refresh"
	// SessionServiceSignOutProcedure is the fully-qualified name of the SessionService's SignOut RPC.
	SessionServiceSignOutProcedure = "/auth.v1.SessionService/SignOut"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sessionServiceServiceDescriptor       = v1.File_auth_v1_session_proto.Services().ByName("SessionService")
	sessionServiceSignInMethodDescriptor  = sessionServiceServiceDescriptor.Methods().ByName("SignIn")
	sessionServiceRefreshMethodDescriptor = sessionServiceServiceDescriptor.Methods().ByName("Refresh")
	sessionServiceSignOutMethodDescriptor = sessionServiceServiceDescriptor.Methods().ByName("SignOut")
)

// SessionServiceClient is a client for the auth.v1.SessionService service.
type SessionServiceClient interface {
	SignIn(context.Context, *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error)
	Refresh(context.Context, *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error)
	SignOut(context.Context, *connect.Request[v1.SignOutRequest]) (*connect.Response[v1.SignOutResponse], error)
}

// NewSessionServiceClient constructs a client for the auth.v1.SessionService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSessionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SessionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sessionServiceClient{
		signIn: connect.NewClient[v1.SignInRequest, v1.SignInResponse](
			httpClient,
			baseURL+SessionServiceSignInProcedure,
			connect.WithSchema(sessionServiceSignInMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		refresh: connect.NewClient[v1.RefreshRequest, v1.RefreshResponse](
			httpClient,
			baseURL+SessionServiceRefreshProcedure,
			connect.WithSchema(sessionServiceRefreshMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		signOut: connect.NewClient[v1.SignOutRequest, v1.SignOutResponse](
			httpClient,
			baseURL+SessionServiceSignOutProcedure,
			connect.WithSchema(sessionServiceSignOutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sessionServiceClient implements SessionServiceClient.
type sessionServiceClient struct {
	signIn  *connect.Client[v1.SignInRequest, v1.SignInResponse]
	refresh *connect.Client[v1.RefreshRequest, v1.RefreshResponse]
	signOut *connect.Client[v1.SignOutRequest, v1.SignOutResponse]
}

// SignIn calls auth.v1.SessionService.SignIn.
func (c *sessionServiceClient) SignIn(ctx context.Context, req *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error) {
	return c.signIn.CallUnary(ctx, req)
}

// Refresh calls auth.v1.SessionService.Refresh.
func (c *sessionServiceClient) Refresh(ctx context.Context, req *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error) {
	return c.refresh.CallUnary(ctx, req)
}

// SignOut calls auth.v1.SessionService.SignOut.
func (c *sessionServiceClient) SignOut(ctx context.Context, req *connect.Request[v1.SignOutRequest]) (*connect.Response[v1.SignOutResponse], error) {
	return c.signOut.CallUnary(ctx, req)
}

// SessionServiceHandler is an implementation of the auth.v1.SessionService service.
type SessionServiceHandler interface {
	SignIn(context.Context, *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error)
	Refresh(context.Context, *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error)
	SignOut(context.Context, *connect.Request[v1.SignOutRequest]) (*connect.Response[v1.SignOutResponse], error)
}

// NewSessionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSessionServiceHandler(svc SessionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sessionServiceSignInHandler := connect.NewUnaryHandler(
		SessionServiceSignInProcedure,
		svc.SignIn,
		connect.WithSchema(sessionServiceSignInMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceRefreshHandler := connect.NewUnaryHandler(
		SessionServiceRefreshProcedure,
		svc.Refresh,
		connect.WithSchema(sessionServiceRefreshMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceSignOutHandler := connect.NewUnaryHandler(
		SessionServiceSignOutProcedure,
		svc.SignOut,
		connect.WithSchema(sessionServiceSignOutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.SessionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SessionServiceSignInProcedure:
			sessionServiceSignInHandler.ServeHTTP(w, r)
		case SessionServiceRefreshProcedure:
			sessionServiceRefreshHandler.ServeHTTP(w, r)
		case SessionServiceSignOutProcedure:
			sessionServiceSignOutHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSessionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSessionServiceHandler struct{}

func (UnimplementedSessionServiceHandler) SignIn(context.Context, *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.SessionService.SignIn is not implemented"))
}

func (UnimplementedSessionServiceHandler) Refresh(context.Context, *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.SessionService.Refresh is not implemented"))
}

func (UnimplementedSessionServiceHandler) SignOut(context.Context, *connect.Request[v1.SignOutRequest]) (*connect.Response[v1.SignOutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.SessionService.SignOut is not implemented"))
}
