// Code generated by MockGen. DO NOT EDIT.
// Source: session_repository.go
//
// Generated by this command:
//
//	mockgen -source=session_repository.go -destination=./mock_repository/mock_session_repository.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	model "mickamy.com/sampay/internal/domain/auth/model"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
	isgomock struct{}
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// AccessTokenExists mocks base method.
func (m *MockSession) AccessTokenExists(ctx context.Context, userID, accessToken string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessTokenExists", ctx, userID, accessToken)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessTokenExists indicates an expected call of AccessTokenExists.
func (mr *MockSessionMockRecorder) AccessTokenExists(ctx, userID, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessTokenExists", reflect.TypeOf((*MockSession)(nil).AccessTokenExists), ctx, userID, accessToken)
}

// Create mocks base method.
func (m *MockSession) Create(ctx context.Context, session model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSessionMockRecorder) Create(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSession)(nil).Create), ctx, session)
}

// Delete mocks base method.
func (m *MockSession) Delete(ctx context.Context, session model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionMockRecorder) Delete(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSession)(nil).Delete), ctx, session)
}

// RefreshTokenExists mocks base method.
func (m *MockSession) RefreshTokenExists(ctx context.Context, userID, refreshToken string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokenExists", ctx, userID, refreshToken)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokenExists indicates an expected call of RefreshTokenExists.
func (mr *MockSessionMockRecorder) RefreshTokenExists(ctx, userID, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokenExists", reflect.TypeOf((*MockSession)(nil).RefreshTokenExists), ctx, userID, refreshToken)
}
