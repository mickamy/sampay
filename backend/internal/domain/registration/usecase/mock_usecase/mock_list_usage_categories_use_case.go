// Code generated by MockGen. DO NOT EDIT.
// Source: list_usage_categories_use_case.go
//
// Generated by this command:
//
//	mockgen -source=list_usage_categories_use_case.go -destination=./mock_usecase/mock_list_usage_categories_use_case.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	usecase "mickamy.com/sampay/internal/domain/registration/usecase"
)

// MockListUsageCategories is a mock of ListUsageCategories interface.
type MockListUsageCategories struct {
	ctrl     *gomock.Controller
	recorder *MockListUsageCategoriesMockRecorder
	isgomock struct{}
}

// MockListUsageCategoriesMockRecorder is the mock recorder for MockListUsageCategories.
type MockListUsageCategoriesMockRecorder struct {
	mock *MockListUsageCategories
}

// NewMockListUsageCategories creates a new mock instance.
func NewMockListUsageCategories(ctrl *gomock.Controller) *MockListUsageCategories {
	mock := &MockListUsageCategories{ctrl: ctrl}
	mock.recorder = &MockListUsageCategoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListUsageCategories) EXPECT() *MockListUsageCategoriesMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockListUsageCategories) Do(ctx context.Context, input usecase.ListUsageCategoriesInput) (usecase.ListUsageCategoriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, input)
	ret0, _ := ret[0].(usecase.ListUsageCategoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockListUsageCategoriesMockRecorder) Do(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockListUsageCategories)(nil).Do), ctx, input)
}
