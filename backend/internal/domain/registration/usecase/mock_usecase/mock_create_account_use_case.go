// Code generated by MockGen. DO NOT EDIT.
// Source: create_account_use_case.go
//
// Generated by this command:
//
//	mockgen -source=create_account_use_case.go -destination=./mock_usecase/mock_create_account_use_case.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	usecase "mickamy.com/sampay/internal/domain/registration/usecase"
)

// MockCreateAccount is a mock of CreateAccount interface.
type MockCreateAccount struct {
	ctrl     *gomock.Controller
	recorder *MockCreateAccountMockRecorder
	isgomock struct{}
}

// MockCreateAccountMockRecorder is the mock recorder for MockCreateAccount.
type MockCreateAccountMockRecorder struct {
	mock *MockCreateAccount
}

// NewMockCreateAccount creates a new mock instance.
func NewMockCreateAccount(ctrl *gomock.Controller) *MockCreateAccount {
	mock := &MockCreateAccount{ctrl: ctrl}
	mock.recorder = &MockCreateAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateAccount) EXPECT() *MockCreateAccountMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockCreateAccount) Do(ctx context.Context, input usecase.CreateAccountInput) (usecase.CreateAccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, input)
	ret0, _ := ret[0].(usecase.CreateAccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockCreateAccountMockRecorder) Do(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockCreateAccount)(nil).Do), ctx, input)
}
