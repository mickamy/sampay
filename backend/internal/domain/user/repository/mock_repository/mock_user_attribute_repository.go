// Code generated by MockGen. DO NOT EDIT.
// Source: user_attribute_repository.go
//
// Generated by this command:
//
//	mockgen -source=user_attribute_repository.go -destination=./mock_repository/mock_user_attribute_repository.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	database "mickamy.com/sampay/internal/infra/storage/database"
	model "mickamy.com/sampay/internal/domain/user/model"
	repository "mickamy.com/sampay/internal/domain/user/repository"
)

// MockUserAttribute is a mock of UserAttribute interface.
type MockUserAttribute struct {
	ctrl     *gomock.Controller
	recorder *MockUserAttributeMockRecorder
	isgomock struct{}
}

// MockUserAttributeMockRecorder is the mock recorder for MockUserAttribute.
type MockUserAttributeMockRecorder struct {
	mock *MockUserAttribute
}

// NewMockUserAttribute creates a new mock instance.
func NewMockUserAttribute(ctrl *gomock.Controller) *MockUserAttribute {
	mock := &MockUserAttribute{ctrl: ctrl}
	mock.recorder = &MockUserAttributeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAttribute) EXPECT() *MockUserAttributeMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockUserAttribute) Create(ctx context.Context, m *model.UserAttribute) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserAttributeMockRecorder) Create(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserAttribute)(nil).Create), ctx, m)
}

// Find mocks base method.
func (m *MockUserAttribute) Find(ctx context.Context, id string, scopes ...database.Scope) (*model.UserAttribute, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(*model.UserAttribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserAttributeMockRecorder) Find(ctx, id any, scopes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, scopes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserAttribute)(nil).Find), varargs...)
}

// Update mocks base method.
func (m_2 *MockUserAttribute) Update(ctx context.Context, m *model.UserAttribute) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserAttributeMockRecorder) Update(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserAttribute)(nil).Update), ctx, m)
}

// Upsert mocks base method.
func (m_2 *MockUserAttribute) Upsert(ctx context.Context, m *model.UserAttribute) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Upsert", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockUserAttributeMockRecorder) Upsert(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockUserAttribute)(nil).Upsert), ctx, m)
}

// WithTx mocks base method.
func (m *MockUserAttribute) WithTx(tx *database.DB) repository.UserAttribute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(repository.UserAttribute)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockUserAttributeMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockUserAttribute)(nil).WithTx), tx)
}
