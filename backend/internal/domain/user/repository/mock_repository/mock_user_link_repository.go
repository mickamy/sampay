// Code generated by MockGen. DO NOT EDIT.
// Source: user_link_repository.go
//
// Generated by this command:
//
//	mockgen -source=user_link_repository.go -destination=./mock_repository/mock_user_link_repository.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	database "mickamy.com/sampay/internal/cli/infra/storage/database"
	model "mickamy.com/sampay/internal/domain/user/model"
	repository "mickamy.com/sampay/internal/domain/user/repository"
)

// MockUserLink is a mock of UserLink interface.
type MockUserLink struct {
	ctrl     *gomock.Controller
	recorder *MockUserLinkMockRecorder
	isgomock struct{}
}

// MockUserLinkMockRecorder is the mock recorder for MockUserLink.
type MockUserLinkMockRecorder struct {
	mock *MockUserLink
}

// NewMockUserLink creates a new mock instance.
func NewMockUserLink(ctrl *gomock.Controller) *MockUserLink {
	mock := &MockUserLink{ctrl: ctrl}
	mock.recorder = &MockUserLinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLink) EXPECT() *MockUserLinkMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockUserLink) Create(ctx context.Context, m *model.UserLink) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserLinkMockRecorder) Create(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserLink)(nil).Create), ctx, m)
}

// Delete mocks base method.
func (m *MockUserLink) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserLinkMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserLink)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockUserLink) Find(ctx context.Context, id string, scopes ...database.Scope) (*model.UserLink, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(*model.UserLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserLinkMockRecorder) Find(ctx, id any, scopes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, scopes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserLink)(nil).Find), varargs...)
}

// GetLastDisplayOrderByUserID mocks base method.
func (m *MockUserLink) GetLastDisplayOrderByUserID(ctx context.Context, userID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastDisplayOrderByUserID", ctx, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastDisplayOrderByUserID indicates an expected call of GetLastDisplayOrderByUserID.
func (mr *MockUserLinkMockRecorder) GetLastDisplayOrderByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastDisplayOrderByUserID", reflect.TypeOf((*MockUserLink)(nil).GetLastDisplayOrderByUserID), ctx, userID)
}

// ListByUserID mocks base method.
func (m *MockUserLink) ListByUserID(ctx context.Context, userID string, scopes ...database.Scope) ([]model.UserLink, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, userID}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListByUserID", varargs...)
	ret0, _ := ret[0].([]model.UserLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserID indicates an expected call of ListByUserID.
func (mr *MockUserLinkMockRecorder) ListByUserID(ctx, userID any, scopes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, userID}, scopes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserID", reflect.TypeOf((*MockUserLink)(nil).ListByUserID), varargs...)
}

// Update mocks base method.
func (m_2 *MockUserLink) Update(ctx context.Context, m *model.UserLink) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserLinkMockRecorder) Update(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserLink)(nil).Update), ctx, m)
}

// WithTx mocks base method.
func (m *MockUserLink) WithTx(tx *database.DB) repository.UserLink {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(repository.UserLink)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockUserLinkMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockUserLink)(nil).WithTx), tx)
}
