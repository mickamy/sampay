// Code generated by MockGen. DO NOT EDIT.
// Source: list_user_link_use_case.go
//
// Generated by this command:
//
//	mockgen -source=list_user_link_use_case.go -destination=./mock_usecase/mock_list_user_link_use_case.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	usecase "mickamy.com/sampay/internal/domain/user/usecase"
)

// MockListUserLink is a mock of ListUserLink interface.
type MockListUserLink struct {
	ctrl     *gomock.Controller
	recorder *MockListUserLinkMockRecorder
	isgomock struct{}
}

// MockListUserLinkMockRecorder is the mock recorder for MockListUserLink.
type MockListUserLinkMockRecorder struct {
	mock *MockListUserLink
}

// NewMockListUserLink creates a new mock instance.
func NewMockListUserLink(ctrl *gomock.Controller) *MockListUserLink {
	mock := &MockListUserLink{ctrl: ctrl}
	mock.recorder = &MockListUserLinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListUserLink) EXPECT() *MockListUserLinkMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockListUserLink) Do(ctx context.Context, input usecase.ListUserLinkInput) (usecase.ListUserLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, input)
	ret0, _ := ret[0].(usecase.ListUserLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockListUserLinkMockRecorder) Do(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockListUserLink)(nil).Do), ctx, input)
}
