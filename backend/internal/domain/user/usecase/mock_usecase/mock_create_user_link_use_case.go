// Code generated by MockGen. DO NOT EDIT.
// Source: create_user_link_use_case.go
//
// Generated by this command:
//
//	mockgen -source=create_user_link_use_case.go -destination=./mock_usecase/mock_create_user_link_use_case.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	usecase "mickamy.com/sampay/internal/domain/user/usecase"
)

// MockCreateUserLink is a mock of CreateUserLink interface.
type MockCreateUserLink struct {
	ctrl     *gomock.Controller
	recorder *MockCreateUserLinkMockRecorder
	isgomock struct{}
}

// MockCreateUserLinkMockRecorder is the mock recorder for MockCreateUserLink.
type MockCreateUserLinkMockRecorder struct {
	mock *MockCreateUserLink
}

// NewMockCreateUserLink creates a new mock instance.
func NewMockCreateUserLink(ctrl *gomock.Controller) *MockCreateUserLink {
	mock := &MockCreateUserLink{ctrl: ctrl}
	mock.recorder = &MockCreateUserLinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateUserLink) EXPECT() *MockCreateUserLinkMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockCreateUserLink) Do(ctx context.Context, input usecase.CreateUserLinkInput) (usecase.CreateUserLinkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, input)
	ret0, _ := ret[0].(usecase.CreateUserLinkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockCreateUserLinkMockRecorder) Do(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockCreateUserLink)(nil).Do), ctx, input)
}
