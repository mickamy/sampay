// Code generated by MockGen. DO NOT EDIT.
// Source: s3_object_repository.go
//
// Generated by this command:
//
//	mockgen -source=s3_object_repository.go -destination=./mock_repository/mock_s3_object_repository.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	database "mickamy.com/sampay/internal/cli/infra/storage/database"
	model "mickamy.com/sampay/internal/domain/common/model"
	repository "mickamy.com/sampay/internal/domain/common/repository"
)

// MockS3Object is a mock of S3Object interface.
type MockS3Object struct {
	ctrl     *gomock.Controller
	recorder *MockS3ObjectMockRecorder
	isgomock struct{}
}

// MockS3ObjectMockRecorder is the mock recorder for MockS3Object.
type MockS3ObjectMockRecorder struct {
	mock *MockS3Object
}

// NewMockS3Object creates a new mock instance.
func NewMockS3Object(ctrl *gomock.Controller) *MockS3Object {
	mock := &MockS3Object{ctrl: ctrl}
	mock.recorder = &MockS3ObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Object) EXPECT() *MockS3ObjectMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockS3Object) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockS3ObjectMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockS3Object)(nil).Delete), ctx, id)
}

// Upsert mocks base method.
func (m_2 *MockS3Object) Upsert(ctx context.Context, m *model.S3Object) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Upsert", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockS3ObjectMockRecorder) Upsert(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockS3Object)(nil).Upsert), ctx, m)
}

// WithTx mocks base method.
func (m *MockS3Object) WithTx(tx *database.DB) repository.S3Object {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(repository.S3Object)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockS3ObjectMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockS3Object)(nil).WithTx), tx)
}
